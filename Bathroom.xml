<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int maxProcesses = 6;
//Amount of semaphores
const int numSemaphores = 2;
const int maxSeats = 2;

// Number of processes in bathroom for each gender
int [0, maxProcesses] nm = 0;
int [0, maxProcesses] nf = 0;

int[0, maxProcesses] ready[maxProcesses];
int[0, maxProcesses] ID;

urgent chan V[numSemaphores];
urgent chan P[numSemaphores];
urgent chan Go;

// [0] = mutex, [1]= bathroom
int [0, 2] sem[numSemaphores] = { 1 , 2 };</declaration>
	<template>
		<name x="5" y="5">Semaphore</name>
		<parameter>const int s</parameter>
		<declaration>// Place local declarations here.

int[0, maxProcesses] blocked = 0;
int[0,maxProcesses - 1] Queue[maxProcesses];
int[0, 5] pid;
int[0,5] i;</declaration>
		<location id="id0" x="119" y="-8">
		</location>
		<location id="id1" x="425" y="-8">
			<committed/>
		</location>
		<location id="id2" x="731" y="-8">
			<committed/>
		</location>
		<location id="id3" x="323" y="196">
			<committed/>
		</location>
		<location id="id4" x="323" y="434">
			<committed/>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="221" y="-110">blocked == 0</label>
			<label kind="assignment" x="289" y="-85">sem[s]++</label>
			<nail x="425" y="-144"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="assignment" x="-33" y="434">Queue[blocked] = pid,
blocked++</label>
			<nail x="-51" y="434"/>
			<nail x="-51" y="-8"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="119" y="170">(blocked == 0 &amp;&amp; sem[s] &gt; 0)</label>
			<label kind="assignment" x="137" y="196">sem[s]--,
ready[pid] = 1</label>
			<nail x="119" y="196"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="323" y="280">sem[s] == 0</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="289" y="68">P[s]?</label>
			<label kind="assignment" x="289" y="85">pid = ID,
ready[pid] = 0,
ID = 0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="204" y="-306">i &gt; blocked</label>
			<label kind="assignment" x="204" y="-272">i = 0</label>
			<nail x="731" y="-271"/>
			<nail x="119" y="-271"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="807" y="-34">i &lt;= blocked</label>
			<label kind="assignment" x="807" y="-17">Queue[i] = Queue[i+1],
i++</label>
			<nail x="799" y="-42"/>
			<nail x="799" y="26"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="459" y="-33">blocked &gt; 0</label>
			<label kind="assignment" x="442" y="-8">pid = Queue[0], 
ready[pid]=1,
blocked--, 
pid = 0</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="263" y="-8">V[s]?</label>
		</transition>
	</template>
	<template>
		<name>Progression</name>
		<location id="id5" x="0" y="0">
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="42" y="0">Go!</label>
			<nail x="68" y="34"/>
			<nail x="68" y="-34"/>
		</transition>
	</template>
	<template>
		<name>Person</name>
		<parameter>const int id, const int gender</parameter>
		<location id="id6" x="-272" y="-204">
			<name x="-282" y="-238">Begin</name>
		</location>
		<location id="id7" x="-272" y="0">
		</location>
		<location id="id8" x="-68" y="-204">
		</location>
		<location id="id9" x="136" y="-204">
		</location>
		<location id="id10" x="340" y="374">
		</location>
		<location id="id11" x="-272" y="204">
		</location>
		<location id="id12" x="-340" y="374">
		</location>
		<location id="id13" x="-476" y="442">
		</location>
		<location id="id14" x="-408" y="204">
		</location>
		<location id="id15" x="136" y="-374">
		</location>
		<location id="id16" x="0" y="374">
			<name x="-42" y="340">WaitLeaveSeat</name>
		</location>
		<location id="id17" x="136" y="204">
		</location>
		<location id="id18" x="340" y="204">
			<name x="348" y="170">InQueue</name>
		</location>
		<location id="id19" x="136" y="374">
			<name x="110" y="340">InBathroom</name>
		</location>
		<location id="id20" x="-170" y="374">
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id20"/>
			<target ref="id12"/>
			<label kind="guard" x="-306" y="374">ready[id]==1</label>
			<label kind="synchronisation" x="-306" y="391">Go?</label>
			<label kind="assignment" x="-306" y="408">ready[id]=0</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id19"/>
			<label kind="guard" x="212" y="374">ready[id]==1</label>
			<label kind="synchronisation" x="212" y="391">Go?</label>
			<label kind="assignment" x="212" y="408">ready[id] = 0</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="204" y="212">V[0]!</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="348" y="246">P[1]!</label>
			<label kind="assignment" x="348" y="263">ID=id,
ready[id] = 0</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-127" y="374">P[0]!</label>
			<label kind="assignment" x="-127" y="391">ID=id,
ready[id] = 0</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-59" y="-289">V[0]!</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-382" y="-8">V[0]!</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="guard" x="-348" y="161">nf &gt; 0</label>
			<label kind="synchronisation" x="-348" y="178">Go?</label>
			<nail x="-340" y="204"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id15"/>
			<label kind="guard" x="144" y="-323">nm &gt; 0</label>
			<label kind="synchronisation" x="144" y="-306">Go?</label>
			<nail x="136" y="-280"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id17"/>
			<label kind="guard" x="51" y="-110">nm == 0</label>
			<label kind="synchronisation" x="51" y="-93">Go?</label>
			<label kind="assignment" x="51" y="-76">nf++</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id17"/>
			<label kind="guard" x="-144" y="102">nf == 0</label>
			<label kind="synchronisation" x="-144" y="119">Go?</label>
			<label kind="assignment" x="-144" y="136">nm++</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-586" y="102">V[0]!</label>
			<nail x="-544" y="442"/>
			<nail x="-544" y="-204"/>
			<nail x="-476" y="-204"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="-450" y="314">gender == 1</label>
			<label kind="synchronisation" x="-450" y="348">Go?</label>
			<label kind="assignment" x="-450" y="331">nf--</label>
			<nail x="-476" y="374"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="-433" y="442">gender == 0</label>
			<label kind="synchronisation" x="-433" y="476">Go?</label>
			<label kind="assignment" x="-433" y="459">nm--</label>
			<nail x="-340" y="442"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="51" y="374">V[1]!</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id11"/>
			<label kind="guard" x="-263" y="51">ready[id]==1</label>
			<label kind="synchronisation" x="-263" y="68">Go?</label>
			<label kind="assignment" x="-263" y="85">ready[id]=0</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="0" y="-229">ready[id]==1</label>
			<label kind="synchronisation" x="0" y="-204">Go?</label>
			<label kind="assignment" x="0" y="-187">ready[id]=0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-263" y="-110">gender == 0</label>
			<label kind="synchronisation" x="-263" y="-93">P[0]!</label>
			<label kind="assignment" x="-263" y="-76">ID=id,
ready[id] = 0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="-195" y="-229">gender == 1</label>
			<label kind="synchronisation" x="-195" y="-204">P[0]!</label>
			<label kind="assignment" x="-195" y="-187">ID=id,
ready[id] = 0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Erik = Person(0, 0);
Julia = Person(1, 1);
Ines = Person(2, 1);
Charlie = Person(3, 0);
Karin = Person(4, 1);
Kalle = Person(5, 0);

Mutex = Semaphore(0);
Bathroom = Semaphore(1);

// List one or more processes to be composed into a system.
system Erik, Julia, Ines, Charlie, Progression, Bathroom, Mutex, Karin, Kalle;
</system>
	<queries>
		<query>
			<formula>A[] ! (sem[1] &lt; 0 || sem[1] &gt; 2)</formula>
			<comment>Checks that it holds that no more than 2 processes can be in the bathroom at the same time, nor can the semaphore get a negative value.
A negative value would mean that the P and V operations in the program is not working correctly, or is poorly implemented.
The query is expected to return true if the above holds.</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (sem[1] == 0)</formula>
			<comment>There is at least one path that reaches a state where two processes has entered the bathroom and are using its resoruces.
The query is expected to return true since at max two processes are allowed in, and sem[1] == 0 implies that both resources are allocated and used.</comment>
		</query>
		<query>
			<formula>Erik.InQueue --&gt; Erik.InBathroom</formula>
			<comment>Checks if it holds that if Erik enters the queue, he will eventually enter the bathroom. 
The query is expected to return true, but returns false. 
This is due to Uppaal not having a fair scheduler and Erik is not enforced/garanteed to progress from the queue to the bathroom. 
That is, Erik could be stuck in the queue. </comment>
		</query>
		<query>
			<formula>A[] !(Erik.InQueue &amp;&amp; Julia.InQueue)</formula>
			<comment>Checks if it holds for all possible states, that Erik and Julia will never be within the bathroom queue concurrently.
The query is expected to return true, which proves that only one gender is allowed to queue for the bathroom at a time. </comment>
		</query>
		<query>
			<formula>A[] !(Erik.InBathroom &amp;&amp; Julia.InBathroom)</formula>
			<comment>Ensures that Erik and Julia cannot be inside their critical section at the same time, for any path. 
Expected to return true if mutual exclusion is certain, or false if Erik and Julia can be in the bathroom at the same time.</comment>
		</query>
		<query>
			<formula>A[] ! deadlock</formula>
			<comment>Ensure that there are no deadlocks for any path. Should always return true.</comment>
		</query>
	</queries>
</nta>
