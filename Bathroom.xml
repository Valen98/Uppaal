<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int maxProcesses = 4;
//Amount of semaphores
const int numSemaphores = 1;
int GENDER;
int currentGender = -1;

int[0,maxProcesses] ready[maxProcesses];
int[0,maxProcesses] ID;
urgent chan V[numSemaphores];
urgent chan P[numSemaphores];
urgent chan Go;

int [0,2] sem[numSemaphores] = {2};</declaration>
	<template>
		<name x="5" y="5">Semaphore</name>
		<parameter>const int s</parameter>
		<declaration>// Place local declarations here.

int[0, 6] blocked = 0;
int[0,6] Queue[6];
int[0, 5] pid;
int[0,5] i;</declaration>
		<location id="id0" x="119" y="-8">
		</location>
		<location id="id1" x="425" y="-8">
			<committed/>
		</location>
		<location id="id2" x="731" y="-8">
			<committed/>
		</location>
		<location id="id3" x="323" y="196">
			<committed/>
		</location>
		<location id="id4" x="323" y="434">
			<committed/>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="179" y="-101">blocked == 0</label>
			<label kind="assignment" x="289" y="-93">sem[s]++,
currentGender = -1</label>
			<nail x="425" y="-144"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="assignment" x="-33" y="434">Queue[blocked] = pid,
blocked++</label>
			<nail x="-51" y="434"/>
			<nail x="-51" y="-8"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="119" y="170">(blocked == 0 &amp;&amp; sem[s] &gt; 0)</label>
			<label kind="assignment" x="137" y="196">sem[s]--,
ready[pid] = 1</label>
			<nail x="119" y="196"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="323" y="280">sem[s] == 0</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="289" y="68">P[s]?</label>
			<label kind="assignment" x="289" y="85">pid = ID,
ready[pid] = 0,
ID = 0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="204" y="-306">i &gt; blocked</label>
			<label kind="assignment" x="204" y="-272">i = 0</label>
			<nail x="731" y="-271"/>
			<nail x="119" y="-271"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="807" y="-34">i &lt;= blocked</label>
			<label kind="assignment" x="807" y="-17">Queue[i] = Queue[i+1],
i++</label>
			<nail x="799" y="-42"/>
			<nail x="799" y="26"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="459" y="-33">blocked &gt; 0</label>
			<label kind="assignment" x="442" y="-8">pid = Queue[0], 
ready[pid]=1,
blocked--, 
pid = 0</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="263" y="-8">V[s]?</label>
		</transition>
	</template>
	<template>
		<name>Progression</name>
		<location id="id5" x="0" y="0">
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="42" y="0">Go!</label>
			<nail x="68" y="34"/>
			<nail x="68" y="-34"/>
		</transition>
	</template>
	<template>
		<name>Person</name>
		<parameter>const int id, const int gender</parameter>
		<location id="id6" x="0" y="0">
			<name x="-59" y="-8">Begin</name>
		</location>
		<location id="id7" x="204" y="0">
			<name x="221" y="-8">Wait4CS</name>
		</location>
		<location id="id8" x="204" y="136">
			<name x="221" y="127">InCS</name>
		</location>
		<location id="id9" x="0" y="136">
			<name x="-76" y="127">AfterCS</name>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="guard" x="-76" y="-110">gender != currentGender &amp;&amp; currentGender != -1</label>
			<nail x="51" y="-85"/>
			<nail x="-68" y="-85"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-25" y="68">Go?</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="25" y="110">V[0]!</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="guard" x="204" y="34">ready[id]==1</label>
			<label kind="synchronisation" x="204" y="51">Go?</label>
			<label kind="assignment" x="204" y="68">ready[id]=0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="42" y="-42">currentGender == gender  || currentGender == -1</label>
			<label kind="synchronisation" x="42" y="-17">P[0]!</label>
			<label kind="assignment" x="42" y="0">ID=id,
ready[id]=0,
currentGender = gender</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Semaphore1 = Semaphore(0);
Erik = Person(0, 0);
Julia = Person(1, 1);
Ines = Person(2, 1);
Charlie = Person(3, 0);
// List one or more processes to be composed into a system.
system Semaphore1, Erik, Julia, Ines, Charlie, Progression;
</system>
	<queries>
		<query>
			<formula>A[] (Erik.Wait4CS &amp;&amp; Charlie.Wait4CS)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; (Erik.Wait4CS &amp;&amp; Charlie.Wait4CS)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; not (Erik.Wait4CS &amp;&amp; Julia.Wait4CS)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; not (sem[0] &gt; 1 &amp;&amp; sem[0]&lt; 0)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] not (sem[0] &gt; 1 &amp;&amp; sem[0] &lt; 0)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Julia.Wait4CS --&gt; Julia.InCS</formula>
			<comment>Check if Julia can enter his CS</comment>
		</query>
		<query>
			<formula>Erik.Wait4CS --&gt; Erik.InCS</formula>
			<comment>Check if Erik can enter his CS</comment>
		</query>
		<query>
			<formula>E&lt;&gt; not (Erik.InCS &amp;&amp; Julia.InCS)</formula>
			<comment>Check if Erik and Julia cannot be inside the Critical Section at the same time</comment>
		</query>
		<query>
			<formula>A[] ! deadlock</formula>
			<comment>Check if there is a deadlock for all states.</comment>
		</query>
	</queries>
</nta>
