<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int maxProcesses = 6;
//Amount of semaphores
urgent chan Go;

const int chocoEgg = 1;
const int chocoCream = 2;
const int eggCream = 3;

const int numChan = 4;
const int arg = 4;

int msg[arg];
chan Send[numChan+1];
chan Recieve[numChan+1];
</declaration>
	<template>
		<name>initiator</name>
		<location id="id0" x="0" y="0">
		</location>
		<location id="id1" x="170" y="0">
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="34" y="-17">Send[3]!</label>
		</transition>
	</template>
	<template>
		<name>Agent</name>
		<parameter>const int ingredient</parameter>
		<location id="id2" x="-102" y="-42">
			<name x="-119" y="-76">Producing</name>
		</location>
		<location id="id3" x="102" y="-42">
			<name x="119" y="-50">Wait2Send</name>
		</location>
		<location id="id4" x="102" y="170">
			<name x="127" y="144">Sending</name>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="102" y="47">Send[ingredient]!</label>
			<label kind="assignment" x="102" y="64">msg[ingredient]=ingredient</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-84" y="153">Go?</label>
			<nail x="-102" y="170"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-84" y="-59">Recieve[3]?</label>
		</transition>
	</template>
	<template>
		<name>Chef</name>
		<parameter>const int ChID</parameter>
		<declaration>int ingredient[arg];</declaration>
		<location id="id5" x="-365" y="-323">
			<name x="-375" y="-357">Waiting4Ingredients</name>
		</location>
		<location id="id6" x="-161" y="-187">
			<name x="-153" y="-212">CookingAndEating</name>
		</location>
		<location id="id7" x="-161" y="-323">
			<name x="-144" y="-332">IngredientsRecieved</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-347" y="-340">Recieve[ChID]?</label>
			<label kind="assignment" x="-348" y="-323">ingredient[ChID]=msg[ChID]</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-331" y="-179">Go?</label>
			<nail x="-365" y="-187"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-153" y="-255">Send[3]!</label>
			<label kind="assignment" x="-153" y="-229">msg[ChID]=0, ingredient[ChID]=0</label>
		</transition>
	</template>
	<template>
		<name>Channel</name>
		<parameter>const int ChID</parameter>
		<declaration>int buff[maxProcesses][arg];
int count = 0;
int tmp = 0;</declaration>
		<location id="id8" x="0" y="0">
		</location>
		<location id="id9" x="136" y="102">
		</location>
		<location id="id10" x="272" y="34">
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-25" y="-93">Send[ChID]?</label>
			<label kind="assignment" x="42" y="-68">buff[count]=msg,
count++</label>
			<nail x="-34" y="-68"/>
			<nail x="34" y="-68"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="51" y="0">tmp==count</label>
			<label kind="assignment" x="51" y="17">tmp=0</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="assignment" x="170" y="-8">buff[tmp]=buff[tmp+1],
tmp++</label>
			<nail x="136" y="34"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="guard" x="154" y="68">tmp &lt; count</label>
			<nail x="272" y="102"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="-68" y="93">count&gt;0</label>
			<label kind="synchronisation" x="-68" y="110">Recieve[ChID]!</label>
			<label kind="assignment" x="-68" y="127">msg = buff[0],
count--</label>
			<nail x="0" y="102"/>
		</transition>
	</template>
	<template>
		<name>Progression</name>
		<location id="id11" x="0" y="0">
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id11"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="42" y="0">Go!</label>
			<nail x="68" y="34"/>
			<nail x="68" y="-34"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
//TableSem = Semaphore(0);
//ChocoEggSem = Semaphore(1);
//ChocoCreamSem = Semaphore(2);
//EggCreamSem = Semaphore(3);

//All agents
ChocoEggAgent = Agent(chocoEgg);
ChocoCreamAgent = Agent(chocoCream);
EggCreamAgent = Agent(eggCream);

//All Chefs
ChefChoco = Chef(eggCream);
ChefEgg = Chef(chocoCream);
ChefCream = Chef(chocoEgg);


//Channel
ChocoEggChan = Channel(0);
ChocoCreamChan = Channel(1);
CreamEggChan = Channel(2);
TableChan = Channel(3);



// List one or more processes to be composed into a system.
system ChocoEggAgent, ChocoCreamAgent, EggCreamAgent, ChefChoco, ChefEgg, ChefCream, Progression, ChocoEggChan, ChocoCreamChan, CreamEggChan, initiator, TableChan;
</system>
	<queries>
		<query>
			<formula>A[] !(ChefChoco.Waiting4Ingredients &amp;&amp; ChefChoco.ingredient[eggCream] == eggCream)</formula>
			<comment>Check if the chef ChefChoco will always have no ingredients when the chef is waiting for ingredients. Should always be true.</comment>
		</query>
		<query>
			<formula>A[] ! (ChefChoco.IngredientsRecieved &amp;&amp; ChefEgg.IngredientsRecieved)</formula>
			<comment>Check mutual exclusion that two chefs cannot receive ingredient simultaneously. Should always return true.</comment>
		</query>
		<query>
			<formula>A[] ! (ChefChoco.ingredient[eggCream]==chocoEgg  || ChefChoco.ingredient[eggCream]==chocoCream) </formula>
			<comment>Is there no possible way the chefchoco can receive the ingredient he already has which is choco. The given query shall always result to true</comment>
		</query>
		<query>
			<formula>ChefChoco.IngredientsRecieved --&gt; ChefChoco.CookingAndEating</formula>
			<comment>Check if there is always true that the chef will recieve ingredients and starts cookingEating. Should return true but the chef is not enforced to progress and could stall even if the chef got their ingredients. Therefore, this returns false.</comment>
		</query>
		<query>
			<formula>A[] ! deadlock</formula>
			<comment>Check if there is a deadlock for all states.</comment>
		</query>
	</queries>
</nta>
